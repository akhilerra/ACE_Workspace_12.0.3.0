package test;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class App_JWT_mf_JWT_Compute_0001_Test {

	/*
	 * App_JWT_mf_JWT_Compute_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.3.0 on Jun 17, 2024 4:44:33 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void App_JWT_mf_JWT_Compute_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("App_JWT").messageFlow("mf_JWT")
				.node("Compute");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Check that the actual Node name matches the expected name
		assertThat(nodeSpy.nodeName(), Matchers.equalTo("Compute"));

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(0));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("failure", 0));
		assertThat(nodeSpy, terminalPropagateCountIs("out", 0));
		assertThat(nodeSpy, terminalPropagateCountIs("out1", 0));
		assertThat(nodeSpy, terminalPropagateCountIs("out2", 0));
		assertThat(nodeSpy, terminalPropagateCountIs("out3", 0));
		assertThat(nodeSpy, terminalPropagateCountIs("out4", 0));

	}

}
